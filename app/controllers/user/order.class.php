<?php

namespace App\Controllers\User;

class Order {
	private static function checkRequred($data, $name) {
		if ( isset( $data ) ) { 
			if( $data == '' ) {
				return array(
					'status' => 'error',
					'message' => '–ü–æ–ª–µ "' . $name . '" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.'
				);
			}
		}
		else {
			return array(
				'status' => 'error',
				'message' => '–ü–æ–ª–µ "' . $name . '" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.'
			);
		}
		return $data;
	}
	private static function checkLength($data, $name, $minLength, $maxLength) {
		if ( isset($data) ) {
			if( strlen($data) < $minLength ) {
				return array(
					'status' => 'error',
					'message' => '–ü–æ–ª–µ "' . $name . '" —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.'
				);
			}
			if( strlen($data) > $maxLength ) {
				return array(
					'status' => 'error',
					'message' => '–ü–æ–ª–µ "' . $name . '" —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.'
				);
			}
		}
		else {
			return '';
		}
		return $data;
	}
	private static function checkValid($data, $name, $minLength, $maxLength) {
		if( $minLength > 0) {
			$var = self::checkRequred($data, $name);
			if ( is_array($var) ) { return $var; }
		}
		$var = self::checkLength($data, $name, $minLength, $maxLength);
		return $var;
	}
	
	public static function addOrder($data) {
		$name = self::checkValid($data['name'], '–ò–º—è', 2, 50);
		$phone = self::checkValid($data['phone'], '–¢–µ–ª–µ—Ñ–æ–Ω', 5, 50);
		$street = self::checkValid($data['street'], '–£–ª–∏—Ü–∞', 5, 100);
		$home = self::checkValid($data['home'], '–î–æ–º', 1, 10);
		$flat = self::checkValid($data['flat'], '–ö–≤–∞—Ä—Ç–∏—Ä–∞', 1, 10);
		$comment = self::checkLength($data['comment'], '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è', 0, 1000);
		$promo = self::checkLength($data['promo'], '–ü—Ä–æ–º–æ–∫–æ–¥', 0, 50);
		$payment = self::checkValid($data['payment'], '–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', 1, 50);
		$date = time();

		if ( is_array($name) ) { return $name; }
		if ( is_array($phone) ) { return $phone; }
		if ( is_array($street) ) { return $street; }
		if ( is_array($home) ) { return $home; }
		if ( is_array($flat) ) { return $flat; }
		if ( is_array($comment) ) { return $comment; }
		if ( is_array($promo) ) { return $promo; }
		if ( is_array($payment) ) { return $payment; }
									 
		$DB = new \App\Core\DB;

		$result = $DB->insert('orders', array(
			array('order_user_name', htmlspecialchars($name)),
			array('order_user_phone', htmlspecialchars($phone)),
			array('order_user_street', htmlspecialchars($street)),
			array('order_user_home', htmlspecialchars($home)),
			array('order_user_flat', htmlspecialchars($flat)),
			array('order_comments', htmlspecialchars($comment)),
			array('order_promo', htmlspecialchars($promo)),
			array('order_payment', htmlspecialchars($payment)),
			array('order_status', 'new'),
			array('order_date', $date),
		));
		if ( !$result ) {
			return array(
				'status' => 'error',
				'message' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'
			);
		}

		$result = $DB->get('orders', ['*'], 'order_user_name = \'' . $name . '\' AND order_user_phone = \'' . $phone . '\' AND order_date = ' . $date);
		$order_id = $result[0]['order_id'];
		$cart = Cart::getCart();
		
		foreach ( $cart as $item ) {
			$deleted = implode(', ', array_column($item['item_deleted'], 'ingredient_name'));
			$DB->insert('order_items', array(
				array('oitem_order_id', $order_id),
				array('oitem_name', $item['item_name']),
				array('oitem_image', $item['item_image']),
				array('oitem_category_value', $item['item_category']['category_value']),
				array('oitem_category_name', $item['item_category']['category_value_ru']),
				array('oitem_size', $item['cart_item_size']['size_value'] . $item['item_category']['category_unit']),
				array('oitem_deleted', $deleted),
				array('oitem_dough', $item['cart_item_dough']),
				array('oitem_count', $item['cart_item_count']),
				array('oitem_price', $item['cart_item_size']['size_price']),
			));
		}

		Mail::send_mail('üç£ ' . SITENAME . ' | –ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ'.$order_id, self::generateMail($result[0], $cart), true, CONTACT_MAIL, CONTACT_MAIL);

		$_COOKIE['cart'] = '[]';
		return array(
			'status' => 'success',
			'message' => '–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞!'
		);
	}

	private static function generateMail($orderInfo, $orderItem) {
		$orderPayment = $orderInfo['order_payment'] == 'card-courier' ? '–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –∫—É—Ä—å–µ—Ä—É', '–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏';
		
		$mail = '<h2>–ü–æ–ª—É—á–∞—Ç–µ–ª—å</h2>
		<p>
		<b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: </b> ' . $orderInfo['order_user_name'] . '<br>
		<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: </b> ' . $orderInfo['order_user_phone'] . '<br>
		<b>–£–ª–∏—Ü–∞: </b> ' . $orderInfo['order_user_street'] . '<br>
		<b>–î–æ–º: </b> ' . $orderInfo['order_user_home'] . '<br>
		<b>–ö–≤–∞—Ä—Ç–∏—Ä–∞: </b> ' . $orderInfo['order_user_flat'] . '<br>
		<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: </b> ' . $orderInfo['order_comments'] . '<br>
		<b>–ü—Ä–æ–º–æ–∫–æ–¥: </b> ' . $orderInfo['order_promo'] . '<br>
		<b>–û–ø–ª–∞—Ç–∞: </b> ' . $orderPayment . '
		</p>
		<h2>–¢–æ–≤–∞—Ä—ã</h2>
		<ol>';
		
		foreach ( $orderItem as $item ) {
			$mail .= '<li><p>' . $item['item_name'] . ' –• ' . $item['cart_item_count'] . '<br>–†–∞–∑–º–µ—Ä ' . $item['cart_item_size']['size_value'] . $item['item_category']['category_unit'] . '<br>' . $item['cart_item_size']['size_price'] . ' —Ä—É–±.</p></li>';
		}

		$mail .= '</ol>';
		return $mail;
	}


}